openapi: 3.0.3
info:
  title: Tutti a tavola
  description: prova
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: amplifyapp.com
tags:
  - name: menu
    description: Everything about your menu
  - name: pasto
    description: Everything about your pasto
  - name: ricette
    description: Everything about your ricetta
paths:
  /menu:
    put:
      tags:
        - menu
      summary: Update an existing menu
      description: Update an existing menu by Id
      operationId: updateMenu
      requestBody:
        description: Update an existent menu in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
          application/xml:
            schema:
              $ref: '#/components/schemas/Menu'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
            application/xml:
              schema:
                $ref: '#/components/schemas/Menu'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
    post:
      tags:
        - menu
      summary: Add a new menu to the homepage
      description: Add a new Menu to the homepage
      operationId: addMenu
      requestBody:
        description: Create a new Menu in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Menu'
          application/xml:
            schema:
              $ref: '#/components/schemas/Menu'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Menu'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Menu'
            application/xml:
              schema:
                $ref: '#/components/schemas/Menu'
        '405':
          description: Invalid input
  /menu/retrieveMenu:
    get:
      tags:
        - menu
      summary: Finds Menu by id
      operationId: findMenuById
      parameters:
        - name: idMenu
          in: query
          required: false
          description: if idMenu has a value this api retrieves only the correspondent menu, otherwise it's going to retrieve all the menu.
          schema:
            type: integer
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Menu'
        '400':
          description: Invalid status value

  /pasto/{pastoId}:
    get:
      tags:
        - pasto
      summary: Find pasto by ID
      description: Returns a single pasto
      operationId: getPastoById
      parameters:
        - name: pastoId
          in: path
          description: ID of pasto to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Pasto'
            application/xml:
              schema:
                $ref: '#/components/schemas/Pasto'
        '400':
          description: Invalid ID supplied
        '404':
          description: Pasto not found

    post:
      tags:
        - pasto
      summary: Updates a pasto in the menu with form data
      description: ''
      operationId: updatePastoWithForm
      parameters:
        - name: pastoId
          in: path
          description: ID of pasto that needs to be updated
          required: true
          schema:
            type: integer
            format: int64
        - name: numeroPersone
          in: query
          schema:
            type: integer
      responses:
        '405':
          description: Invalid input

    delete:
      tags:
        - pasto
      summary: Deletes a pasto
      description: delete a pasto
      operationId: deletePasto
      parameters:
        - name: pastoId
          in: path
          description: Pasto id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid Pasto value

  /ricetta/{ricettaId}:
    get:
      tags:
        - ricette
      summary: Find ricetta by ID
      description: Returns a single ricetta
      operationId: getRicettaById
      parameters:
        - name: ricettaId
          in: path
          description: ID of ricetta to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ricetta'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ricetta'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ricetta not found
    post:
      tags:
        - ricette
      summary: Post ricetta by ID
      description: post a single ricetta
      operationId: postRicettaById
      parameters:
        - name: ricettaId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Create a new Ricetta in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ricetta'
          application/xml:
            schema:
              $ref: '#/components/schemas/Ricetta'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ricetta'
        required: true
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ricetta'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ricetta'
        '400':
          description: Invalid ID supplied
    delete:
      tags:
        - ricette
      summary: delete ricetta by ID
      description: delete a single ricetta
      operationId: deleteRicettaById
      parameters:
        - name: ricettaId
          in: path
          description: ID of ricetta to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ricetta'
            application/xml:
              schema:
                $ref: '#/components/schemas/Ricetta'
        '400':
          description: Invalid ID supplied
        '404':
          description: Ricetta not found



components:
  schemas:
    Ricetta:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
    Pasto:
      type: object
      properties:
        id:
          type: integer
          format: int64
        numeroPersone:
          type: integer
        ricette:
          type: array
          items:
            $ref: '#/components/schemas/Ricetta'
    Menu:
      required:
        - portate
      type: object
      properties:
        idMenu:
          type: integer
          format: int64
          example: 10
        pasti:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Pasto'

  requestBodies:
    Menu:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Menu'
        application/xml:
          schema:
            $ref: '#/components/schemas/Menu'